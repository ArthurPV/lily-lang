import "test.add" as mod

A :: Int32 := 3;
B :: Int64 := 120;
C :: Str := "hello";
D :: Str := "Hi!!";
E :: Letter := A:$;
F :: MyError.F[T] := MyError:1;
G :: Int128 := 333333333;
H :: Float32 := 3.333;
I :: Float64 := 3.12230333;

error[T] MyError T;

pub fun add(x, y) = return x+y;

fun is_zero(x) = if x == 0 do true;;

type Letter: enum =
	A Int32,
	B Int32,
	C Int32,
	D FF[Int32]
end

fun letter_to_str(x) =
	match x do
		A:_ => "A",
		B:_ => "B",
		C:_ => "C",
		D:_ => "D"
	end
end

type Person: record =
	name Str,
	age Uint8
end

type Persons: alias = Int32;

object Work: trait =
	@get_work :: self -> Str
	@get_salary :: self -> Int32
end


object Person: class =
	@name Str;
	@age Uint8;

	@get_name(self) = self.name;
	@get_age(self) = self.age;
end

fun main =
	x := 20
	if x == 0 do
		true
	elif x == 1 do
		false
	else
		true
	end

	if x == 10 do
		println("Hello")
	end

	mut y := 0

	while y < 10 do
		y += 1
	end
end

module Hello =
	pub fun hello = "hello";
end

module Calc =
	pub fun add(x, y) = x+y;
	pub fun sub(x, y) = x-y;
	pub fun mul(x, y) = x*y;
	pub fun div(x, y) = x/y;
end
